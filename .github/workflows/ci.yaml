name: CI Desafio Licitacoes

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ main ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    services:
      # Usado pelo docker-compose para conectar ao host docker
      docker:
        image: docker:dind
        options: --privileged

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Necessário para o script check_commits.sh poder comparar branches

    - name: Set up Docker Compose
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and Run Docker Compose services
      run: docker compose up --build -d

    - name: Apply migrations immediately
      run: |
        sleep 3  # Pequena pausa para o container iniciar
        echo "Aplicando migrações imediatamente:"
        docker compose exec -T api python manage.py migrate || echo "Migrations failed, will retry"

    - name: Check Docker network and connectivity
      run: |
        echo "Docker Network Configuration:"
        docker network ls
        docker network inspect app-network || echo "Network not found"
        
        echo "Container Status:"
        docker ps -a

    - name: Wait for DB to be healthy
      run: |
        echo "Waiting for DB..."
        for i in {1..20}; do
          if docker compose exec -T db pg_isready -U postgres; then
            echo "Database is ready!"
            break
          fi
          echo "Attempt $i/20: Database not ready yet, waiting..."
          sleep 1
        done
        docker compose exec -T db pg_isready -U postgres
      timeout-minutes: 1

    - name: Wait for API to be ready
      run: |
        echo "Waiting for API to be ready..."
        for i in {1..30}; do
          if docker compose exec -T api curl -s --retry 1 --max-time 2 http://localhost:8000/admin/ > /dev/null; then
            echo "API is ready!"
            break
          fi
          echo "Attempt $i/30: API not ready yet, waiting..."
          # A cada 5 tentativas, tenta aplicar migrações e verificar logs
          if [ $((i % 5)) -eq 0 ]; then
            echo "=== Tentativa $i: Verificando status do sistema ==="
            docker compose exec -T api python manage.py migrate || echo "Migration failed"
            echo "=== Últimas 20 linhas de log da API ==="
            docker logs --tail 20 desafio_api || echo "Não foi possível obter logs"
          fi
          sleep 2
        done
      timeout-minutes: 2

    - name: Run Backend Tests (pytest)
      run: docker compose exec -T api pytest

    # Passo opcional: Rodar Frontend Tests (substituir pelo comando correto)
    # - name: Run Frontend Tests
    #   run: docker-compose exec -T web npm run test

    - name: Run Hash Verification Script
      run: bash scripts/check_hash.sh

    - name: Run Commit Verification Script
      run: |
        # Determina a branch base dependendo do evento (push ou pull_request)
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          BASE_REF=${{ github.base_ref }}
          CURRENT_REF=${{ github.head_ref }}
        else
          BASE_REF=main # Assume main como base para pushes em develop
          CURRENT_REF=develop
        fi
        echo "Base ref: $BASE_REF, Current ref: $CURRENT_REF"
        bash scripts/check_commits.sh $CURRENT_REF $BASE_REF

    - name: Clean up Docker Compose services
      if: always() # Garante que rode mesmo se passos anteriores falharem
      run: docker compose down -v --remove-orphans 