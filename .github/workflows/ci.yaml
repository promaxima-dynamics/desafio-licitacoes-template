name: CI Desafio Licitacoes

on:
  pull_request:
    branches: [ main ]

jobs:
  validate-test-build:
    name: Validação e Testes
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged

    steps:
    # === VALIDAÇÃO DE CÓDIGO E COMMITS ===
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
        ref: ${{ github.head_ref || github.ref_name }}
    
    - name: Setup Git para comparação de branches
      run: |
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub Actions"
        echo "Fetching all branches..."
        git fetch --all --prune --tags
        echo "Available branches:"
        git branch -a

    - name: Verificar integridade dos arquivos
      run: bash scripts/check_hash.sh

    - name: Verificar commits
      run: |
        # Determina a branch base dependendo do evento
        BASE_REF=${{ github.base_ref }}
        CURRENT_REF=${{ github.head_ref }}
        echo "Base ref: $BASE_REF, Current ref: $CURRENT_REF"
        bash scripts/check_commits.sh $CURRENT_REF $BASE_REF

    # === CONFIGURAÇÃO DO AMBIENTE ===
    - name: Configurar Docker Compose
      uses: docker/setup-qemu-action@v3
    
    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Construir e executar serviços Docker
      run: docker compose up --build -d

    - name: Verificar rede Docker e conectividade
      run: |
        echo "Configuração da rede Docker:"
        docker network ls
        docker network inspect app-network || echo "Rede não encontrada"
        
        echo "Status dos containers:"
        docker ps -a

    # === PREPARAÇÃO DO AMBIENTE DE TESTES ===
    - name: Aguardar disponibilidade do banco de dados
      run: |
        echo "Aguardando banco de dados..."
        for i in {1..20}; do
          if docker compose exec -T db pg_isready -U postgres; then
            echo "Banco de dados pronto!"
            break
          fi
          echo "Tentativa $i/20: Banco de dados ainda não está pronto, aguardando..."
          sleep 1
        done
        docker compose exec -T db pg_isready -U postgres
      timeout-minutes: 1

    - name: Aplicar migrações
      run: |
        sleep 3
        echo "Aplicando migrações:"
        docker compose exec -T api python manage.py migrate

    - name: Aguardar disponibilidade da API
      run: |
        echo "Aguardando API..."
        for i in {1..30}; do
          if docker compose exec -T api curl -s --retry 1 --max-time 2 http://localhost:8000/admin/ > /dev/null; then
            echo "API pronta!"
            break
          fi
          echo "Tentativa $i/30: API ainda não está pronta, aguardando..."
          if [ $((i % 5)) -eq 0 ]; then
            echo "=== Tentativa $i: Verificando status do sistema ==="
            echo "=== Últimas 20 linhas de log da API ==="
            docker logs --tail 20 desafio_api || echo "Não foi possível obter logs"
          fi
          sleep 2
        done
      timeout-minutes: 2

    # === TESTES ===
    - name: Executar testes do Backend (pytest)
      run: docker compose exec -T api pytest

    - name: Executar testes do Frontend
      run: docker compose exec -T web npm run test

    # === LIMPEZA DE RECURSOS ===
    - name: Limpar serviços Docker Compose
      if: always()
      run: docker compose down -v --remove-orphans 