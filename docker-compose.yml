services:
  db:
    image: postgres:15-alpine
    container_name: desafio_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-licitacoes}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432" # Exponha apenas se precisar acessar o DB diretamente
    healthcheck:
        # Simplificado: Apenas checa se o usuário padrão consegue conectar
        test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
        interval: 3s
        timeout: 3s
        retries: 5

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: desafio_api
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/app
      - ./sample_data:/app/sample_data
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=settings
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-django-insecure-local-dev-key}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-True}
      - POSTGRES_DB=${POSTGRES_DB:-licitacoes}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - PYTHONUNBUFFERED=1
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s

  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: desafio_web
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      # Ex: VITE_API_BASE_URL=http://api:8000
    depends_on:
      - api
    networks:
      - app-network
    
networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local 